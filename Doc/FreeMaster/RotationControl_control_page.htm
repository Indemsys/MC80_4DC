<!doctype html>
<html>

<head>
  <meta charset="utf-8">
  <title>MC80 Motor Control Panel</title>
  <style>
    html,
    body {
      font-family: Verdana, sans-serif;
      font-size: 14px;
      line-height: 1.2;
      margin: 10px;
      background-color: #f5f5f5;
    }

    table {
      border-collapse: collapse;
      width: 100%;
      max-width: 1000px;
      margin: 0 auto;
      background-color: white;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    table td {
      border: 1px solid #d4d4d4;
      text-align: center;
      padding: 10px;
      vertical-align: middle;
      font-family: Verdana, sans-serif;
      font-size: 13px;
      line-height: 1.3;
    }

    .header {
      background-color: #4CAF50;
      color: white;
      font-weight: bold;
      font-size: 18px;
    }

    .motor-header {
      background-color: #2196F3;
      color: white;
      font-weight: bold;
      font-size: 14px;
    }

    .section-header {
      background-color: #FF9800;
      color: white;
      font-weight: bold;
      font-size: 14px;
    }

    .control-header {
      background-color: #9C27B0;
      color: white;
      font-weight: bold;
      font-size: 14px;
    }

    .emergency {
      background-color: #f44336;
      color: white;
      font-weight: bold;
    }

    .warning {
      background-color: #ff9800;
      color: white;
      font-weight: bold;
    }

    .separator {
      background-color: #f0f0f0;
      height: 10px;
      border: none;
    }

    .can-status {
      background-color: #607D8B;
      color: white;
      font-weight: bold;
      font-size: 14px;
    }

    .error-status {
      background-color: #ffebee;
      border-left: 4px solid #f44336;
      font-size: 11px;
      line-height: 1.4;
    }

    .driver-error-ok {
      color: #4caf50;
      font-weight: bold;
    }

    .driver-error-warning {
      color: #ff9800;
      font-weight: bold;
    }

    .driver-error-critical {
      color: #f44336;
      font-weight: bold;
    }

    button {
      text-decoration: none;
      color: inherit;
      display: block;
      padding: 8px 12px;
      border-radius: 4px;
      transition: background-color 0.3s, transform 0.1s;
      border: 1px solid transparent;
      font-weight: bold;
      cursor: pointer;
      width: 100%;
      font-family: Verdana, sans-serif;
      font-size: 13px;
    }

    button:hover {
      opacity: 0.8;
      transform: translateY(-1px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    button:active {
      transform: translateY(0);
    }

    button:disabled {
      opacity: 0.4 !important;
      cursor: not-allowed !important;
      transform: none !important;
      box-shadow: none !important;
      background-color: #9e9e9e !important;
      color: #666 !important;
    }

    button:disabled:hover {
      opacity: 0.4 !important;
      transform: none !important;
      box-shadow: none !important;
    }

    .forward-btn {
      background-color: #4CAF50;
      color: white;
    }

    .reverse-btn {
      background-color: #2196F3;
      color: white;
    }

    .stop-btn {
      background-color: #FF9800;
      color: white;
    }

    .emergency-btn {
      background-color: #f44336;
      color: white;
      animation: pulse 2s infinite;
    }

    .coast-btn {
      background-color: #9E9E9E;
      color: white;
    }

    .system-btn {
      background-color: #607D8B;
      color: white;
    }

    .can-btn {
      background-color: #795548;
      color: white;
    }

    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(244, 67, 54, 0.7);
      }

      70% {
        box-shadow: 0 0 0 10px rgba(244, 67, 54, 0);
      }

      100% {
        box-shadow: 0 0 0 0 rgba(244, 67, 54, 0);
      }
    }

    .status-cell {
      background-color: #e8f5e8;
      font-size: 12px;
      padding: 5px;
    }

    /* Responsive design for narrow screens */
    @media (max-width: 800px) {
      button {
        font-size: 11px;
        padding: 6px 8px;
      }

      table td {
        padding: 8px;
        font-size: 12px;
      }

      .header {
        font-size: 16px;
      }

      .motor-header, .section-header, .control-header {
        font-size: 12px;
      }
    }

    @media (max-width: 600px) {
      button {
        font-size: 10px;
        padding: 5px 6px;
      }

      table td {
        padding: 6px;
        font-size: 11px;
      }

      .header {
        font-size: 14px;
      }

      .motor-header, .section-header, .control-header {
        font-size: 11px;
      }
    }

    @media (max-width: 480px) {
      button {
        font-size: 9px;
        padding: 4px 5px;
      }

      table td {
        padding: 4px;
        font-size: 10px;
      }

      .header {
        font-size: 12px;
      }

      .motor-header, .section-header, .control-header {
        font-size: 10px;
      }

      /* Make motor headers more compact on very small screens */
      .motor-header br {
        display: none;
      }

      .motor-header {
        line-height: 1.1;
      }
    }
  </style>
  <meta http-equiv="x-ua-compatible" content="ie=edge,chrome=1" />
  <meta name="viewport" content="width=device-width, initial-scale=1 maximum-scale=1 minimum-scale=1" />
  <!-- Get the information object named "FreeMASTER" (needs version 3.1.3 and above) -->
  <script type="text/javascript" src="fmstr://localapp/info.js"></script>
  <!-- load JSON-RPC and FreeMASTER wrapper object -->
  <script type="text/javascript" src="./simple-jsonrpc-js.js"></script>
  <script type="text/javascript" src="./freemaster-client.js"></script>
  <script>
    // FreeMASTER communication object (following example.htm pattern)
    var pcm;

    // Command names (matching those defined in Project.pmpx)
    // These will be passed to PCM.SendCommand by name, not by code

    // Display messages on screen
    function displayMessage(message, type = 'info') {
      const infoDiv = document.getElementById('info');
      if (infoDiv) {
        const timestamp = new Date().toLocaleTimeString();
        const color = type === 'error' ? '#ff4444' : type === 'warn' ? '#ff8800' : '#4CAF50';
        infoDiv.innerHTML = `<span style="background-color: ${color}; color: white; padding: 4px 8px; border-radius: 4px;">[${timestamp}] ${message}</span>`;

        // Auto-hide after 5 seconds for non-error messages
        if (type !== 'error') {
          setTimeout(() => {
            if (infoDiv.innerHTML.includes(message)) {
              infoDiv.innerHTML = '';
            }
          }, 5000);
        }
      }
    }

    // Initialize FreeMASTER connection (following example.htm pattern)
    function initializeFreeMASTER() {
      displayMessage('Initializing FreeMASTER connection...', 'info');
      console.log('Starting FreeMASTER initialization...');

      // Default address
      var rpcs_addr = "localhost:41000";

      // FreeMASTER 3.1.3 and above provides the info about itself
      if (typeof (FreeMASTER) != "undefined") {
        rpcs_addr = FreeMASTER.rpcs_addr;
        console.log("FreeMASTER version: " + FreeMASTER.version);
        console.log("JSON-RPC server address: " + FreeMASTER.rpcs_addr);
      }

      pcm = new PCM(rpcs_addr, on_connected, on_error, on_error);
      pcm.OnServerError = on_error;
      pcm.OnSocketError = on_error;
    }

    function on_connected() {
      displayMessage('FreeMASTER connected successfully', 'info');
      console.log('FreeMASTER connected successfully');

      // Initialize button states - disable motor controls by default until we know CAN status
      updateMotorButtonsState(1); // Assume CAN is enabled initially for safety

      // Ensure CAN buttons are always enabled from the start
      ensureCanButtonsEnabled();

      // Start status monitoring - update 5 times per second (every 200ms)
      updateStatus();
      setInterval(updateStatus, 200);
    }

    function on_error(err) {
      displayMessage('FreeMASTER error: ' + err, 'error');
      console.error('FreeMASTER error:', err);
    }

    // Send command using FreeMASTER official SendCommand method
    function sendCommand(commandName, buttonElement) {
      if (!pcm) {
        displayMessage('Command not sent: FreeMASTER not connected', 'error');
        return;
      }

      // Check if button is disabled due to CAN status before any processing
      // But allow CAN control buttons, calibration, emergency stops, and system commands to always work
      const isCanControlButton = commandName === 'DISABLE_CAN' || commandName === 'ENABLE_CAN';
      const isCalibrationButton = commandName === 'CALIBRATE_CURRENT';
      const isEmergencyButton = commandName.includes('EMERGENCY') || commandName === 'EMERGENCY_STOP_ALL';
      const isSystemCommand = commandName === 'SAVE_PARAMS' || commandName === 'RESET_FAULTS' || commandName === 'RESET_DEVICE';

      if (buttonElement && buttonElement.disabled && !isCanControlButton && !isCalibrationButton && !isEmergencyButton && !isSystemCommand) {
        displayMessage(`Command "${commandName}" blocked: Motor controls disabled when CAN processing is enabled`, 'warn');
        return;
      }

      // Temporarily disable button to prevent double-clicks
      // Exception: Calibration, emergency, and system commands buttons should not be disabled
      if (buttonElement && !isCalibrationButton && !isEmergencyButton && !isSystemCommand) {
        buttonElement.disabled = true;

        // For CAN control buttons, restore them immediately after command
        // For other buttons, use the standard restore mechanism
        if (isCanControlButton) {
          setTimeout(() => {
            buttonElement.disabled = false;
          }, 1000);
        } else {
          setTimeout(() => {
            // Only re-enable if it wasn't disabled due to CAN status
            // We'll check CAN status and update accordingly
            updateStatus();
          }, 1000);
        }
      }

      console.log(`Sending command "${commandName}"...`);

      pcm.SendCommand(commandName)
        .then(r => {
          displayMessage(`Command "${commandName}" sent successfully`, 'info');
          console.log('Command sent successfully:', r);
        })
        .catch(e => {
          displayMessage(`Command "${commandName}" failed: ${e.message || e}`, 'error');
          console.error('Command failed:', e);
        });
    }

    // Update motor control buttons based on CAN command processing status
    function updateMotorButtonsState(canEnabled) {
      // Motor control buttons that should be disabled when CAN is enabled
      // NOTE: Emergency stop buttons are EXCLUDED for safety - they must always be available
      // NOTE: CAN control buttons (DISABLE_CAN/ENABLE_CAN) are NOT included here
      // so they remain always available to change CAN state
      const motorControlSelectors = [
        // Motor forward buttons
        'button[onclick*="MOTOR1_START_FWD"]',
        'button[onclick*="MOTOR2_START_FWD"]',
        'button[onclick*="MOTOR3_START_FWD"]',
        'button[onclick*="MOTOR4_START_FWD"]',
        // Motor reverse buttons
        'button[onclick*="MOTOR1_START_REV"]',
        'button[onclick*="MOTOR2_START_REV"]',
        'button[onclick*="MOTOR3_START_REV"]',
        'button[onclick*="MOTOR4_START_REV"]',
        // Motor soft stop buttons
        'button[onclick*="MOTOR1_SOFT_STOP"]',
        'button[onclick*="MOTOR2_SOFT_STOP"]',
        'button[onclick*="MOTOR3_SOFT_STOP"]',
        'button[onclick*="MOTOR4_SOFT_STOP"]',
        // NOTE: Emergency stop buttons intentionally EXCLUDED for safety
        // Global non-emergency motor commands
        'button[onclick*="COAST_STOP_ALL"]',
        // Driver control buttons
        'button[onclick*="TOGGLE_DRV1_EN"]',
        'button[onclick*="TOGGLE_DRV2_EN"]'
      ];

      // CAN is enabled (1) = motor buttons should be disabled
      // CAN is disabled (0) = motor buttons should be enabled
      const shouldDisable = (canEnabled === 1);

      motorControlSelectors.forEach(selector => {
        const buttons = document.querySelectorAll(selector);
        buttons.forEach(button => {
          // Double-check: never disable CAN control buttons, calibration button, or system command buttons
          const onclick = button.getAttribute('onclick') || '';
          const isCanButton = onclick.includes('DISABLE_CAN') || onclick.includes('ENABLE_CAN');
          const isCalibrationButton = onclick.includes('CALIBRATE_CURRENT');
          const isSystemButton = onclick.includes('SAVE_PARAMS') || onclick.includes('RESET_FAULTS') || onclick.includes('RESET_DEVICE');

          if (!isCanButton && !isCalibrationButton && !isSystemButton) {
            button.disabled = shouldDisable;

            // Add visual feedback
            if (shouldDisable) {
              button.style.opacity = '0.4';
              button.style.cursor = 'not-allowed';
              if (!button.title.includes('(Disabled: CAN commands are enabled)')) {
                button.title = button.title + ' (Disabled: CAN commands are enabled)';
              }
            } else {
              button.style.opacity = '';
              button.style.cursor = 'pointer';
              // Remove the disabled message from title if it exists
              button.title = button.title.replace(' (Disabled: CAN commands are enabled)', '');
            }
          }
        });
      });

      // Update status message
      const statusElement = document.getElementById('can-status-value');
      const statusTextElement = document.getElementById('can-status-text');

      if (statusElement) {
        if (shouldDisable) {
          statusElement.style.color = '#ff6b6b';
          statusElement.style.fontWeight = 'bold';
        } else {
          statusElement.style.color = '#51cf66';
          statusElement.style.fontWeight = 'bold';
        }
      }

      if (statusTextElement) {
        if (shouldDisable) {
          statusTextElement.textContent = '(Enabled - Motor controls disabled for safety)';
          statusTextElement.style.color = '#ff6b6b';
          statusTextElement.style.fontWeight = 'bold';
        } else {
          statusTextElement.textContent = '(Disabled - Motor controls available)';
          statusTextElement.style.color = '#51cf66';
          statusTextElement.style.fontWeight = 'bold';
        }
      }

      // Ensure CAN control buttons and emergency buttons are always enabled (safety override)
      ensureCanButtonsEnabled();
    }

    // Ensure CAN control buttons, calibration button, emergency buttons, and system command buttons are always enabled
    function ensureCanButtonsEnabled() {
      const canButtons = document.querySelectorAll('button[onclick*="DISABLE_CAN"], button[onclick*="ENABLE_CAN"]');
      canButtons.forEach(button => {
        button.disabled = false;
        button.style.opacity = '';
        button.style.cursor = 'pointer';
      });

      // Also ensure emergency stop buttons are always enabled for safety
      const emergencyButtons = document.querySelectorAll('button[onclick*="EMERGENCY"]');
      emergencyButtons.forEach(button => {
        button.disabled = false;
        button.style.opacity = '';
        button.style.cursor = 'pointer';
      });

      // Also ensure calibration button is always enabled
      const calibrationButtons = document.querySelectorAll('button[onclick*="CALIBRATE_CURRENT"]');
      calibrationButtons.forEach(button => {
        button.disabled = false;
        button.style.opacity = '';
        button.style.cursor = 'pointer';
      });

      // Also ensure system command buttons are always enabled
      const systemButtons = document.querySelectorAll('button[onclick*="SAVE_PARAMS"], button[onclick*="RESET_FAULTS"], button[onclick*="RESET_DEVICE"]');
      systemButtons.forEach(button => {
        button.disabled = false;
        button.style.opacity = '';
        button.style.cursor = 'pointer';
      });
    }

    // Parse TMC6200 GSTAT register errors and return user-friendly text
    function parseGstatErrors(gstatValue) {
      if (gstatValue === 0) {
        return '<span style="color: #51cf66; font-weight: bold;">OK - No Errors</span>';
      }

      const errors = [];

      // Check each bit according to TMC6200 GSTAT register definition
      if (gstatValue & (1 << 0)) errors.push('Reset occurred');
      if (gstatValue & (1 << 1)) errors.push('Driver overtemp pre-warning');
      if (gstatValue & (1 << 2)) errors.push('Driver overtemp shutdown');
      if (gstatValue & (1 << 3)) errors.push('Charge pump undervoltage');
      if (gstatValue & (1 << 4)) errors.push('Phase U short detection');
      if (gstatValue & (1 << 5)) errors.push('Phase U short to GND');
      if (gstatValue & (1 << 6)) errors.push('Phase U short to VS');
      if (gstatValue & (1 << 8)) errors.push('Phase V short detection');
      if (gstatValue & (1 << 9)) errors.push('Phase V short to GND');
      if (gstatValue & (1 << 10)) errors.push('Phase V short to VS');
      if (gstatValue & (1 << 12)) errors.push('Phase W short detection');
      if (gstatValue & (1 << 13)) errors.push('Phase W short to GND');
      if (gstatValue & (1 << 14)) errors.push('Phase W short to VS');

      if (errors.length === 0) {
        return '<span style="color: #ff9800;">Unknown error (0x' + gstatValue.toString(16).toUpperCase() + ')</span>';
      }

      // Color code based on severity
      let color = '#ff6b6b'; // Red for errors
      if (errors.length === 1 && errors[0] === 'Reset occurred') {
        color = '#ff9800'; // Orange for reset (informational)
      } else if (errors.some(e => e.includes('overtemp pre-warning'))) {
        color = '#ff9800'; // Orange for warnings
      }

      return '<span style="color: ' + color + '; font-weight: bold;">' + errors.join('; ') + '</span>';
    }

    // Parse system error flags and return user-friendly text
    function parseSystemErrorFlags(errorFlags) {
      if (errorFlags === 0) {
        return '<span style="color: #51cf66; font-weight: bold;">OK - No System Errors</span>';
      }

      const errors = [];

      // Check each bit according to T_system_error_flags structure definition
      if (errorFlags & (1 << 0)) errors.push('Motor 1 overcurrent');
      if (errorFlags & (1 << 1)) errors.push('Motor 2 overcurrent');
      if (errorFlags & (1 << 2)) errors.push('Motor 3 overcurrent');
      if (errorFlags & (1 << 3)) errors.push('Motor 4 overcurrent');
      if (errorFlags & (1 << 4)) errors.push('Driver 1 overtemperature');
      if (errorFlags & (1 << 5)) errors.push('Driver 2 overtemperature');
      if (errorFlags & (1 << 6)) errors.push('TMC6200 driver 1 fault');
      if (errorFlags & (1 << 7)) errors.push('TMC6200 driver 2 fault');
      if (errorFlags & (1 << 8)) errors.push('Power supply fault');
      if (errorFlags & (1 << 9)) errors.push('CAN bus error');
      if (errorFlags & (1 << 10)) errors.push('CPU overtemperature');
      if (errorFlags & (1 << 11)) errors.push('EMERGENCY STOP ACTIVE');

      if (errors.length === 0) {
        return '<span style="color: #ff9800;">Unknown system error (0x' + errorFlags.toString(16).toUpperCase() + ')</span>';
      }

      // Color code based on severity - emergency stop is most critical
      let color = '#ff6b6b'; // Red for errors
      if (errorFlags & (1 << 11)) {
        color = '#d32f2f'; // Dark red for emergency stop
      }

      return '<span style="color: ' + color + '; font-weight: bold;">' + errors.join('; ') + '</span>';
    }

    // Update status variables periodically (using ReadVariable like in example.htm)
    function updateStatus() {
      if (!pcm) {
        return;
      }

      try {
        // Read CAN command processing status
        pcm.ReadVariable('g_can_command_processing_enabled')
          .then((value) => {
            const statusElement = document.getElementById('can-status-value');
            if (statusElement) {
              statusElement.textContent = value.data;
            }

            // Update motor control buttons based on CAN status
            updateMotorButtonsState(parseInt(value.data));
          })
          .catch((err) => {
            console.warn('Could not read CAN status:', err.msg || err);
          });

        // Read driver temperatures
        pcm.ReadVariable('adc.temp_motor1')
          .then((value) => {
            const tempElement = document.getElementById('temp-driver1-value');
            if (tempElement) {
              tempElement.textContent = parseFloat(value.data).toFixed(1);
            }
          })
          .catch((err) => {
            console.warn('Could not read driver 1 temperature:', err.msg || err);
          });

        pcm.ReadVariable('adc.temp_motor2')
          .then((value) => {
            const tempElement = document.getElementById('temp-driver2-value');
            if (tempElement) {
              tempElement.textContent = parseFloat(value.data).toFixed(1);
            }
          })
          .catch((err) => {
            console.warn('Could not read driver 2 temperature:', err.msg || err);
          });

        // Read CPU temperature
        pcm.ReadVariable('adc.cpu_temp')
          .then((value) => {
            const tempElement = document.getElementById('temp-cpu-value');
            if (tempElement) {
              tempElement.textContent = parseFloat(value.data).toFixed(1);
            }
          })
          .catch((err) => {
            console.warn('Could not read CPU temperature:', err.msg || err);
          });

        // Read power consumption currents for each driver
        pcm.ReadVariable('adc.ipwr_motor1')
          .then((value) => {
            const currentElement = document.getElementById('current-driver1-value');
            if (currentElement) {
              currentElement.textContent = parseFloat(value.data).toFixed(2);
            }
          })
          .catch((err) => {
            console.warn('Could not read driver 1 current:', err.msg || err);
          });

        pcm.ReadVariable('adc.ipwr_motor2')
          .then((value) => {
            const currentElement = document.getElementById('current-driver2-value');
            if (currentElement) {
              currentElement.textContent = parseFloat(value.data).toFixed(2);
            }
          })
          .catch((err) => {
            console.warn('Could not read driver 2 current:', err.msg || err);
          });

        // Read supply voltages
        pcm.ReadVariable('adc.v24v_supply')
          .then((value) => {
            const voltageElement = document.getElementById('voltage-24v-value');
            if (voltageElement) {
              voltageElement.textContent = parseFloat(value.data).toFixed(1);
            }
          })
          .catch((err) => {
            console.warn('Could not read 24V supply:', err.msg || err);
          });

        pcm.ReadVariable('adc.v5v_supply')
          .then((value) => {
            const voltageElement = document.getElementById('voltage-5v-value');
            if (voltageElement) {
              voltageElement.textContent = parseFloat(value.data).toFixed(2);
            }
          })
          .catch((err) => {
            console.warn('Could not read 5V supply:', err.msg || err);
          });

        // Read driver enable states
        pcm.ReadVariable('g_drv1_en_state')
          .then((value) => {
            const drvElement = document.getElementById('drv1-status-value');
            if (drvElement) {
              drvElement.textContent = value.data;
              // Color coding: green for enabled, red for disabled
              drvElement.style.color = (parseInt(value.data) === 1) ? '#51cf66' : '#ff6b6b';
              drvElement.style.fontWeight = 'bold';
            }
          })
          .catch((err) => {
            console.warn('Could not read DRV1 state:', err.msg || err);
          });

        pcm.ReadVariable('g_drv2_en_state')
          .then((value) => {
            const drvElement = document.getElementById('drv2-status-value');
            if (drvElement) {
              drvElement.textContent = value.data;
              // Color coding: green for enabled, red for disabled
              drvElement.style.color = (parseInt(value.data) === 1) ? '#51cf66' : '#ff6b6b';
              drvElement.style.fontWeight = 'bold';
            }
          })
          .catch((err) => {
            console.warn('Could not read DRV2 state:', err.msg || err);
          });

        // Read TMC6200 driver error status (GSTAT values)
        pcm.ReadVariable('g_tmc6200_monitoring.driver[0].last_gstat_value')
          .then((value) => {
            const errorElement = document.getElementById('drv1-error-value');
            if (errorElement) {
              const gstatValue = parseInt(value.data);
              const errorText = parseGstatErrors(gstatValue);
              errorElement.innerHTML = errorText;
            }
          })
          .catch((err) => {
            console.warn('Could not read TMC6200 DRV1 GSTAT:', err.msg || err);
          });

        pcm.ReadVariable('g_tmc6200_monitoring.driver[1].last_gstat_value')
          .then((value) => {
            const errorElement = document.getElementById('drv2-error-value');
            if (errorElement) {
              const gstatValue = parseInt(value.data);
              const errorText = parseGstatErrors(gstatValue);
              errorElement.innerHTML = errorText;
            }
          })
          .catch((err) => {
            console.warn('Could not read TMC6200 DRV2 GSTAT:', err.msg || err);
          });

        // Read system error flags (including emergency stop status)
        pcm.ReadVariable('g_system_error_flags')
          .then((value) => {
            const errorFlags = parseInt(value.data);

            // Update system error status display
            const systemErrorElement = document.getElementById('system-error-value');
            if (systemErrorElement) {
              const errorText = parseSystemErrorFlags(errorFlags);
              systemErrorElement.innerHTML = errorText;
            }
          })
          .catch((err) => {
            console.warn('Could not read system error flags:', err.msg || err);
          });

      } catch (error) {
        console.warn('Error updating status:', error);
      }
    }

    // Initialize page when loaded
    document.addEventListener('DOMContentLoaded', function () {
      displayMessage('Loading MC80 control page...', 'info');

      // Initialize FreeMASTER connection using the proper method from example.htm
      setTimeout(() => {
        initializeFreeMASTER();
      }, 500);
    });
  </script>
</head>

<body>
  <div
    style="position: fixed; top: 0; width: 100%; line-height: 1.5; text-align: center; z-index: 1000; padding: 5px; min-height: 30px;"
    id="info">
    <span style="background-color: #2196F3; color: white; padding: 4px 8px; border-radius: 4px;">Loading control
      page...</span>
  </div>

  <div style="margin-top: 40px;">
    <table>
      <!-- Header -->
      <tr>
        <td colspan="5" class="header">MC80 - Motor Control Panel</td>
      </tr>

      <!-- Motor Headers -->
      <tr>
        <td class="control-header">Action</td>
        <td class="motor-header">Motor 1</td>
        <td class="motor-header">Motor 2</td>
        <td class="motor-header">Motor 3</td>
        <td class="motor-header">Motor 4</td>
      </tr>

      <!-- Forward Commands -->
      <tr>
        <td class="section-header">Forward</td>
        <td><button class="forward-btn" onclick="sendCommand('MOTOR1_START_FWD', this)"
            title="Start Motor 1 Forward">START FWD</button></td>
        <td><button class="forward-btn" onclick="sendCommand('MOTOR2_START_FWD', this)"
            title="Start Motor 2 Forward">START FWD</button></td>
        <td><button class="forward-btn" onclick="sendCommand('MOTOR3_START_FWD', this)"
            title="Start Motor 3 Forward">START FWD</button></td>
        <td><button class="forward-btn" onclick="sendCommand('MOTOR4_START_FWD', this)"
            title="Start Motor 4 Forward">START FWD</button></td>
      </tr>

      <!-- Reverse Commands -->
      <tr>
        <td class="section-header">Reverse</td>
        <td><button class="reverse-btn" onclick="sendCommand('MOTOR1_START_REV', this)"
            title="Start Motor 1 Reverse">START REV</button></td>
        <td><button class="reverse-btn" onclick="sendCommand('MOTOR2_START_REV', this)"
            title="Start Motor 2 Reverse">START REV</button></td>
        <td><button class="reverse-btn" onclick="sendCommand('MOTOR3_START_REV', this)"
            title="Start Motor 3 Reverse">START REV</button></td>
        <td><button class="reverse-btn" onclick="sendCommand('MOTOR4_START_REV', this)"
            title="Start Motor 4 Reverse">START REV</button></td>
      </tr>

      <!-- Soft Stop Commands -->
      <tr>
        <td class="section-header">Soft Stop</td>
        <td><button class="stop-btn" onclick="sendCommand('MOTOR1_SOFT_STOP', this)" title="Soft Stop Motor 1">SOFT
            STOP</button></td>
        <td><button class="stop-btn" onclick="sendCommand('MOTOR2_SOFT_STOP', this)" title="Soft Stop Motor 2">SOFT
            STOP</button></td>
        <td><button class="stop-btn" onclick="sendCommand('MOTOR3_SOFT_STOP', this)" title="Soft Stop Motor 3">SOFT
            STOP</button></td>
        <td><button class="stop-btn" onclick="sendCommand('MOTOR4_SOFT_STOP', this)" title="Soft Stop Motor 4">SOFT
            STOP</button></td>
      </tr>

      <!-- Emergency Stop Commands -->
      <tr>
        <td class="emergency">Emergency Stop</td>
        <td><button class="emergency-btn" onclick="sendCommand('MOTOR1_EMERGENCY', this)"
            title="Emergency Stop Motor 1">EMERGENCY</button></td>
        <td><button class="emergency-btn" onclick="sendCommand('MOTOR2_EMERGENCY', this)"
            title="Emergency Stop Motor 2">EMERGENCY</button></td>
        <td><button class="emergency-btn" onclick="sendCommand('MOTOR3_EMERGENCY', this)"
            title="Emergency Stop Motor 3">EMERGENCY</button></td>
        <td><button class="emergency-btn" onclick="sendCommand('MOTOR4_EMERGENCY', this)"
            title="Emergency Stop Motor 4">EMERGENCY</button></td>
      </tr>

      <!-- Separator -->
      <tr>
        <td colspan="5" class="separator"></td>
      </tr>

      <!-- Global Commands -->
      <tr>
        <td class="warning">Global Commands</td>
        <td colspan="2"><button class="emergency-btn" onclick="sendCommand('EMERGENCY_STOP_ALL', this)"
            title="Emergency Stop All Motors">EMERGENCY STOP ALL</button></td>
        <td colspan="2"><button class="coast-btn" onclick="sendCommand('COAST_STOP_ALL', this)"
            title="Coast Stop All Motors">COAST STOP ALL</button></td>
      </tr>

      <!-- Separator -->
      <tr>
        <td colspan="5" class="separator"></td>
      </tr>

      <!-- Driver Control -->
      <tr>
        <td class="control-header">Driver Control</td>
        <td colspan="2"><button class="system-btn" onclick="sendCommand('TOGGLE_DRV1_EN', this)"
            title="Toggle Driver 1 Enable">Toggle DRV1 EN</button></td>
        <td colspan="2"><button class="system-btn" onclick="sendCommand('TOGGLE_DRV2_EN', this)"
            title="Toggle Driver 2 Enable">Toggle DRV2 EN</button></td>
      </tr>

      <!-- CAN Control -->
      <tr>
        <td class="can-status">CAN Control</td>
        <td colspan="2"><button class="can-btn" onclick="sendCommand('DISABLE_CAN', this)"
            title="Disable CAN Command Processing">DISABLE CAN</button></td>
        <td colspan="2"><button class="can-btn" onclick="sendCommand('ENABLE_CAN', this)"
            title="Enable CAN Command Processing">ENABLE CAN</button></td>
      </tr>

      <!-- Separator -->
      <tr>
        <td colspan="5" class="separator"></td>
      </tr>

      <!-- System Commands -->
      <tr>
        <td class="control-header">System</td>
        <td><button class="system-btn" onclick="sendCommand('CALIBRATE_CURRENT', this)"
            title="Calibrate Motor Current">Calibrate Current</button></td>
        <td><button class="system-btn" onclick="sendCommand('RESET_FAULTS', this)" title="Reset Driver Faults">Reset
            Faults</button></td>
        <td><button class="system-btn" onclick="sendCommand('SAVE_PARAMS', this)" title="Save Parameters">Save
            Params</button></td>
        <td><button class="emergency-btn" onclick="sendCommand('RESET_DEVICE', this)" title="Reset Device">RESET DEVICE</button></td>
      </tr>

      <!-- Status Information -->
      <tr>
        <td colspan="5" class="separator"></td>
      </tr>
      <tr>
        <td class="control-header">Status</td>
        <td colspan="4" class="status-cell">
          CAN Commands: <span id="can-status-value">-</span>
          <span id="can-status-text">(1=Enabled - Motor buttons disabled, 0=Disabled - Motor buttons enabled)</span>
          <br/>
          Driver States: DRV1=<span id="drv1-status-value">-</span> | DRV2=<span id="drv2-status-value">-</span>
          (1=Enabled, 0=Disabled)
        </td>
      </tr>

      <!-- TMC6200 Driver Error Status -->
      <tr>
        <td class="control-header">Driver Errors</td>
        <td colspan="2" class="status-cell">
          <b>Driver 1 (TMC6200):</b><br/>
          <span id="drv1-error-value">-</span>
        </td>
        <td colspan="2" class="status-cell">
          <b>Driver 2 (TMC6200):</b><br/>
          <span id="drv2-error-value">-</span>
        </td>
      </tr>

      <!-- System Error Status -->
      <tr>
        <td class="control-header">System Errors</td>
        <td colspan="4" class="status-cell">
          <span id="system-error-value">-</span>
        </td>
      </tr>

      <!-- Temperature & Power Monitoring -->
      <tr>
        <td class="control-header">Temperatures</td>
        <td class="status-cell">
          Driver 1: <span id="temp-driver1-value">-</span>°C<br/>
          Driver 2: <span id="temp-driver2-value">-</span>°C
        </td>
        <td class="status-cell">
          CPU: <span id="temp-cpu-value">-</span>°C
        </td>
        <td colspan="2" class="status-cell">
          Driver 1 Current: <span id="current-driver1-value">-</span>A<br/>
          Driver 2 Current: <span id="current-driver2-value">-</span>A
        </td>
      </tr>
      <tr>
        <td class="control-header">Supply Voltages</td>
        <td colspan="4" class="status-cell">
          24V: <span id="voltage-24v-value">-</span>V | 5V: <span id="voltage-5v-value">-</span>V
        </td>
      </tr>

      <!-- Information -->
      <tr>
        <td colspan="5" class="separator"></td>
      </tr>
      <tr>
        <td colspan="5" style="background-color: #e3f2fd; font-size: 12px; padding: 8px;">
          <b>Motor Configuration:</b><br />
          • Emergency stops are always allowed (safety feature)<br />
          • Motor commands blocked when CAN processing enabled<br />
          • Motor pairs: M1&M2 share phases, M3&M4 share phases<br /><br />
          <b>Driver Error Monitoring:</b><br />
          • Green: No errors | Orange: Warnings | Red: Critical errors<br /><br />
        </td>
      </tr>
    </table>
  </div>

</body>

</html>
